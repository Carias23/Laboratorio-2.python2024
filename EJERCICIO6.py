{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cc5dcfcb-7fb5-487d-80c7-0bac0f533f0b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese un número entre 1 y 20:  20\n",
      "Ingrese un carácter:  *\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Patrón 1:\n",
      "*\n",
      "**\n",
      "***\n",
      "****\n",
      "*****\n",
      "******\n",
      "*******\n",
      "********\n",
      "*********\n",
      "**********\n",
      "***********\n",
      "************\n",
      "*************\n",
      "**************\n",
      "***************\n",
      "****************\n",
      "*****************\n",
      "******************\n",
      "*******************\n",
      "********************\n",
      "\n",
      "Patrón 2:\n",
      "********************\n",
      "*******************\n",
      "******************\n",
      "*****************\n",
      "****************\n",
      "***************\n",
      "**************\n",
      "*************\n",
      "************\n",
      "***********\n",
      "**********\n",
      "*********\n",
      "********\n",
      "*******\n",
      "******\n",
      "*****\n",
      "****\n",
      "***\n",
      "**\n",
      "*\n",
      "\n",
      "Patrón 3:\n",
      "                   *\n",
      "                  **\n",
      "                 ***\n",
      "                ****\n",
      "               *****\n",
      "              ******\n",
      "             *******\n",
      "            ********\n",
      "           *********\n",
      "          **********\n",
      "         ***********\n",
      "        ************\n",
      "       *************\n",
      "      **************\n",
      "     ***************\n",
      "    ****************\n",
      "   *****************\n",
      "  ******************\n",
      " *******************\n",
      "********************\n",
      "\n",
      "Patrón 4:\n",
      "********************\n",
      " *******************\n",
      "  ******************\n",
      "   *****************\n",
      "    ****************\n",
      "     ***************\n",
      "      **************\n",
      "       *************\n",
      "        ************\n",
      "         ***********\n",
      "          **********\n",
      "           *********\n",
      "            ********\n",
      "             *******\n",
      "              ******\n",
      "               *****\n",
      "                ****\n",
      "                 ***\n",
      "                  **\n",
      "                   *\n"
     ]
    }
   ],
   "source": [
    "def patron1(numero, caracter):\n",
    "    for i in range(1, numero + 1):\n",
    "        print(caracter * i)\n",
    "\n",
    "def patron2(numero, caracter):\n",
    "    for i in range(numero, 0, -1):\n",
    "        print(caracter * i)\n",
    "\n",
    "def patron3(numero, caracter):\n",
    "    for i in range(1, numero + 1):\n",
    "        espacios = \" \" * (numero - i)\n",
    "        print(espacios + caracter * i)\n",
    "\n",
    "def patron4(numero, caracter):\n",
    "    for i in range(numero, 0, -1):\n",
    "        espacios = \" \" * (numero - i)\n",
    "        print(espacios + caracter * i)\n",
    "\n",
    "def main():\n",
    "    numero = int(input(\"Ingrese un número entre 1 y 20: \"))\n",
    "    caracter = input(\"Ingrese un carácter: \")\n",
    "\n",
    "    if numero < 1 or numero > 20:\n",
    "        print(\"El número debe estar entre 1 y 20.\")\n",
    "        return\n",
    "\n",
    "    print(\"\\nPatrón 1:\")\n",
    "    patron1(numero, caracter)\n",
    "    print(\"\\nPatrón 2:\")\n",
    "    patron2(numero, caracter)\n",
    "    print(\"\\nPatrón 3:\")\n",
    "    patron3(numero, caracter)\n",
    "    print(\"\\nPatrón 4:\")\n",
    "    patron4(numero, caracter)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebb5fa23-35a8-4233-86fe-f1d2a5d7f50c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
